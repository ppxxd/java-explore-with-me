drop table if exists users, categories, locations, events, compilations, compilation_events, requests, comments;

create table if not exists categories(
    id bigint generated by default as identity primary key,
    category_name varchar(50) not null unique
);

create table if not exists users(
    id bigint generated by default as identity primary key,
    user_name varchar(250) not null,
    user_email varchar(254) not null
);

create table if not exists locations (
    id  bigint generated by default as identity primary key,
    lat real not null,
    lon real not null
);

create table if not exists events(
    id bigint generated by default as identity primary key,
    annotation varchar(2000) not null,
    category_id bigint,
    confirmed_requests bigint,
    created_on timestamp without time zone not null,
    event_description varchar(7000) not null,
    event_date timestamp without time zone not null,
    initiator_id bigint not null,
    location_id bigint,
    paid boolean,
    participants_limit int default 0,
    published_on timestamp without time zone,
    request_moderation boolean,
    event_state varchar(20),
    title varchar(120) not null,
    views bigint,
    constraint fk_events_categories foreign key (category_id) references categories (id) on delete cascade,
    constraint fk_events_users foreign key (initiator_id) references users (id) on delete cascade,
    constraint fk_events_location foreign key (location_id) references locations (id) on delete cascade
);

create index idx_events_initiator_id on events(initiator_id);
create index idx_events_event_date on events(event_date);
create index idx_events_title on events(title);
create index idx_events_state on events(event_state);

create table if not exists requests(
    id bigint generated by default as identity primary key,
    created timestamp without time zone not null,
    event_id bigint not null,
    requester_id bigint not null,
    status varchar(20) not null,
    constraint fk_event_id foreign key (event_id) references events (id) on delete cascade,
    constraint fk_requester_id foreign key (requester_id) references users (id) on delete cascade
);

create table if not exists compilations (
    id bigint generated by default as identity primary key,
    pinned boolean not null,
    title varchar(255) not null
);

create table if not exists compilation_events (
    compilation_id bigint not null,
    event_id bigint not null,
    constraint pk_comp_event primary key (compilation_id, event_id),
    constraint fk_event_compilation foreign key (event_id) references events (id) on delete cascade,
    constraint fk_compilation_event foreign key (compilation_id) references compilations (id) on delete cascade
);

create table if not exists comments (
    id bigint generated by default as identity primary key,
    event_id bigint,
    author_id bigint,
    comment_text varchar(2000) not null,
    created_on timestamp without time zone not null,
    constraint fk_event_comment foreign key (event_id) references events (id) on delete cascade,
    constraint fk_user_comment foreign key (author_id) references users (id) on delete cascade
);